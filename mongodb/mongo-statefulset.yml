# Specifies the API version being used for this Kubernetes resource.
apiVersion: apps/v1

# Specifies the type of resource, which is a "StatefulSet" in this case.
kind: StatefulSet

metadata:
  # Name for this StatefulSet resource.
  name: mongo

  # Namespace in which the StatefulSet will be created.
  namespace: wush

  # Labels are key-value pairs used for organizing and selecting objects.
  # Here, we label this StatefulSet as part of the "mongo" application.
  labels:
    app: mongo

spec:

  # Defines a label selector to match pods managed by this StatefulSet.
  selector:
    matchLabels:
      app: mongo

  # Specifies the name of the service that governs this StatefulSet.
  serviceName: mongo

  # Minimum number of seconds for which a newly created pod should be ready without any container crashing for it to be considered available.
  minReadySeconds: 10

  # The number of desired pods. Defaults to 1.
  replicas: 1

  # Describes the pod template that this StatefulSet will create.
  template:
    metadata:
      labels:
        app: mongo
    spec:

      # Optional duration in seconds that the pod needs to terminate gracefully.
      terminationGracePeriodSeconds: 10

      # List of containers belonging to the pod.
      containers:

        # Name of the container.
      - name: mongo
        # Docker image to be used for the container, pulling from Docker Hub.
        image: mongo:4.2.24-bionic

        # Image pull policy. "IfNotPresent" means that kubelet pulls the image if it isn't already present on the node.
        imagePullPolicy: IfNotPresent

        # List of environment variables to set in the container.
        env: 
        - name: MONGO_INITDB_ROOT_USERNAME_FILE
          value: /etc/mongo-credentials/MONGO_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD_FILE
          value: /etc/mongo-credentials/MONGO_ROOT_PASSWORD

        # List of ports to expose from the container.
        ports:
        - containerPort: 27017
          name: mongo

        # Pod volumes to mount into the container's filesystem.
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
        - name: mongo-config
          mountPath: /config
        - name: mongo-secret
          mountPath: /etc/mongo-credentials

      # List of volumes that can be mounted by containers belonging to the pod.
      volumes:
      - name: mongo-persistent-storage
        # Reference to a PersistentVolumeClaim in the same namespace.
        persistentVolumeClaim:
          # Name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
          claimName: mongo-pv-claim
      - name: mongo-config
        # Represents a ConfigMap that should populate this volume.
        configMap:
          name: mongo-config
          items: 
            - key: mongo.conf
              path: mongo.conf
      - name: mongo-secret
        # Represents a Secret that should populate this volume.
        secret:
          secretName: mongo-secret
